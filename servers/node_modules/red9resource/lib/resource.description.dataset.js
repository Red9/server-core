var moment = require('moment');
var _ = require('underscore')._;

var common = require('./resource.common');

module.exports = {
    name: 'dataset',
    tableName: 'dataset',

    mapping: [
        {
            cassandraKey: 'id',
            cassandraType: 'uuid',
            jsKey: 'id',
            jsType: 'string'
        },
        {
            cassandraKey: 'start_time',
            cassandraType: 'timestamp',
            jsKey: 'startTime',
            jsType: 'timestamp'
        },
        {
            cassandraKey: 'end_time',
            cassandraType: 'timestamp',
            jsKey: 'endTime',
            jsType: 'timestamp'
        },
        {
            cassandraKey: 'name',
            cassandraType: 'varchar',
            jsKey: 'title',
            jsType: 'string'
        },
        {
            cassandraKey: 'owner',
            cassandraType: 'uuid',
            jsKey: 'owner',
            jsType: 'string',
        },
        {
            cassandraKey: 'axes',
            cassandraType: 'list<text>',
            jsKey: 'source',
            jsType: 'array'
        },
        {
            cassandraKey: 'summary_statistics',
            cassandraType: 'varchar',
            jsKey: 'summaryStatistics',
            jsType: 'object'
        },
        {
            cassandraKey: 'create_time',
            cassandraType: 'timestamp',
            jsKey: 'createTime',
            jsType: 'timestamp'

        },
    ],

    populateOnCreate: function (newDataset) {
        newDataset.createTime = moment().valueOf();
    },
    checkResource: function (dataset, callback) {
        // TODO(SRLM): Need to check:
        // - owner is valid
        callback(null);
    },
    expand: function (parameters, dataset, callback) {
        callback(null, dataset);
//        var expandFunctions = {
//            owner: function(resource, expandCallback) {
//                userResource.get({id: resource.owner}, function(userList) {
//                    if (userList.length !== 1) {
//
//                    } else {
//                        resource.owner = userList[0];
//                    }
//                    expandCallback();
//                });
//            },
//            headPanel: function(resource, expandCallback) {
//                panelResource.get({id: resource.headPanelId}, function(panelList) {
//                    if (panelList.length !== 1) {
//
//                    } else {
//                        resource.headPanel = panelList[0];
//                    }
//                    expandCallback();
//                });
//            }
//        };
//        function getRelatedCount(id, callback) {
//            cassandraCustom.getDatasetCount(id, function(count) {
//                callback(count);
//            });
//        }
//        exports.getRelatedCount = getRelatedCount;
    }
};


//var eventResource = requireFromRoot('support/resources/event');
//var panelResource = requireFromRoot('support/resources/panel');
//var log = requireFromRoot('support/logger').log;
//var deletePre = function (id, continueCallback) {
//    exports.get({id: id}, function (datasets) {
//        if (datasets.length === 1) {
//            // Clean up associated resources
//            var dataset = datasets[0];
//            eventResource.deleteEventByDataset(id, function (errEvent) {
//                panelResource.delete(dataset.headPanelId, function (errPanel) {
//                    if (errEvent || errPanel) {
//                        log.error('Could error deleting associated resources with dataset ' + id + ': ' + errEvent + ', ' + errPanel);
//                        continueCallback(false);
//                    } else {
//                        continueCallback();
//                    }
//                });
//            });
//
//        } else {
//            log.debug('Invalid dataset id ' + id + ': gave ' + datasets.length + ' responses');
//            continueCallback(false);
//        }
//    });
//};

