var moment = require('moment');
var _ = require('underscore')._;

var common = require('./resource.common');
var validators = require('./validators');

var Joi = require('joi');

var datasetSource = Joi.object().description('the RNC source information').options({className: 'datasetSource'})

// TODO: Add axes here

var basicModel = {
    id: validators.id,
    startTime: validators.timestamp,
    endTime: validators.timestamp,
    owner: validators.id,
    title: Joi.string().description('the human readable title of this dataset'),
    summaryStatistics: validators.summaryStatistics,
    timezone: Joi.string().description('timezone information. Not used at this time.'),
    source: datasetSource,
    createTime: validators.timestamp.description('the time that this dataset was uploaded')
};

var resourceName = 'dataset';

module.exports = {
    name: resourceName,
    tableName: 'dataset',

    models: {
        model: basicModel,
        create: Joi.object({ /// Important: be sure to change the model in the dataset route as well.
            owner: basicModel.owner.required(),
            title: basicModel.title.required()
        }).options({className: resourceName + '.create'}),
        update: Joi.object({
            owner: basicModel.owner,
            title: basicModel.title
        }).options({className: resourceName + '.update'}),
        resultModel: Joi.object({
            id: basicModel.id.required(),
            owner: basicModel.owner.required(),
            title: basicModel.title.required(),
            createTime: basicModel.createTime.required(),

            // These are part of the migration away from Cassandra panels, so they're not required yet
            summaryStatistics: basicModel.summaryStatistics,
            timezone: basicModel.timezone,
            source: basicModel.source,
            startTime: basicModel.startTime,
            endTime: basicModel.endTime
        }).options({className: resourceName}),
        search: {
            'startTime': basicModel.startTime,
            'startTime.gt': basicModel.startTime.description('Select datasets that begin after a given time'),
            'startTime.lt': basicModel.startTime.description('Select datasets that begin before a given time'),
            'endTime': basicModel.endTime,
            'endTime.gt': basicModel.endTime.description('Select datasets that end after a given time'),
            'endTime.lt': basicModel.endTime.description('Select datasets that end before a given time'),
            'createTime': basicModel.createTime,
            'createTime.gt': basicModel.createTime,
            'createTime.lt': basicModel.createTime,
            'owner': basicModel.owner,
            'title': basicModel.title
        }
    },

    mapping: [
        {
            cassandraKey: 'id',
            cassandraType: 'uuid',
            jsKey: 'id',
            jsType: 'string'
        },
        {
            cassandraKey: 'start_time',
            cassandraType: 'timestamp',
            jsKey: 'startTime',
            jsType: 'timestamp'
        },
        {
            cassandraKey: 'end_time',
            cassandraType: 'timestamp',
            jsKey: 'endTime',
            jsType: 'timestamp'
        },
        {
            cassandraKey: 'name',
            cassandraType: 'varchar',
            jsKey: 'title',
            jsType: 'string'
        },
        {
            cassandraKey: 'owner',
            cassandraType: 'uuid',
            jsKey: 'owner',
            jsType: 'string',
        },
        {
            cassandraKey: 'axes',
            cassandraType: 'list<text>',
            jsKey: 'source',
            jsType: 'array'
        },
        {
            cassandraKey: 'summary_statistics',
            cassandraType: 'varchar',
            jsKey: 'summaryStatistics',
            jsType: 'object'
        },
        {
            cassandraKey: 'create_time',
            cassandraType: 'timestamp',
            jsKey: 'createTime',
            jsType: 'timestamp'

        },
    ],

    populateOnCreate: function (newDataset) {
        newDataset.createTime = moment().valueOf();
    },
    checkResource: function (dataset, callback) {
        // TODO(SRLM): Need to check:
        // - owner is valid
        callback(null);
    },
    expand: function (parameters, dataset, callback) {
        callback(null, dataset);
//        var expandFunctions = {
//            owner: function(resource, expandCallback) {
//                userResource.get({id: resource.owner}, function(userList) {
//                    if (userList.length !== 1) {
//
//                    } else {
//                        resource.owner = userList[0];
//                    }
//                    expandCallback();
//                });
//            },
//            headPanel: function(resource, expandCallback) {
//                panelResource.get({id: resource.headPanelId}, function(panelList) {
//                    if (panelList.length !== 1) {
//
//                    } else {
//                        resource.headPanel = panelList[0];
//                    }
//                    expandCallback();
//                });
//            }
//        };
//        function getRelatedCount(id, callback) {
//            cassandraCustom.getDatasetCount(id, function(count) {
//                callback(count);
//            });
//        }
//        exports.getRelatedCount = getRelatedCount;
    }
};


//var eventResource = requireFromRoot('support/resources/event');
//var panelResource = requireFromRoot('support/resources/panel');
//var log = requireFromRoot('support/logger').log;
//var deletePre = function (id, continueCallback) {
//    exports.get({id: id}, function (datasets) {
//        if (datasets.length === 1) {
//            // Clean up associated resources
//            var dataset = datasets[0];
//            eventResource.deleteEventByDataset(id, function (errEvent) {
//                panelResource.delete(dataset.headPanelId, function (errPanel) {
//                    if (errEvent || errPanel) {
//                        log.error('Could error deleting associated resources with dataset ' + id + ': ' + errEvent + ', ' + errPanel);
//                        continueCallback(false);
//                    } else {
//                        continueCallback();
//                    }
//                });
//            });
//
//        } else {
//            log.debug('Invalid dataset id ' + id + ': gave ' + datasets.length + ' responses');
//            continueCallback(false);
//        }
//    });
//};

