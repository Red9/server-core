/** Master file to provide access to resources
 *
 *
 */
var _ = require('underscore')._;

var crud = require('./resource.crud.js');

var eventDescription = require('./resource.description.event');
var userDescription = require('./resource.description.user');
var commentDescription = require('./resource.description.comment');
var videoDescription = require('./resource.description.video');
var layoutDescription = require('./resource.description.layout');
var datasetDescription = require('./resource.description.dataset');

var panel = require('./panel');

/**
 *
 * @param config With the following keys:
 * - cassandraHosts (array of IP/URL:PORTs),
 * - cassandraKeyspace (string)
 * @param callback {err}
 *
 */
exports.init = function (config, callback) {
    panel.init(config);
    exports.panel = panel.panel;
    require('./cassandra').init(config, callback);
};

/**
 *
 * @param resourceDescription
 * @returns {{}}
 */
function addResource(resourceDescription) {
    var result = {};

    result.name = resourceDescription.name;
    result.models = resourceDescription.models;

    /**
     *
     * @param newResource
     * @param callback {err, ???}
     * @param deepMigrate {bool} never set to true.
     */
    result.create = function (newResource, callback, deepMigrate) {
        crud.create(resourceDescription, newResource, callback, deepMigrate);
    };

    /**
     *
     * @param query
     * @param options
     * @param rowCallback
     * @param callback (err, totalRows)
     */
    result.find = function (query, options, rowCallback, callback) {
        crud.find(resourceDescription, query, options, rowCallback, callback);
    };

    /**
     *
     * @param id
     * @param updatedEvent can be entire event (non-editable keys will be ignored). Must have at least one editable key
     * @param callback {function} {err, updatedResource}
     */

    result.update = function (id, updatedEvent, callback) {
        crud.update(result.find, resourceDescription, id, updatedEvent, callback);
    };

    /** DELETE from database
     *
     * Possible errors?
     *
     * If the resource doesn't exist we get something like this:
     * { [VError: event 678ad3be-9d48-40e1-c217-db866f9972a9 does not exist (0 results found)]
  jse_shortmsg: 'event 678ad3be-9d48-40e1-c217-db866f9972a9 does not exist (0 results found)',
  jse_summary: 'event 678ad3be-9d48-40e1-c217-db866f9972a9 does not exist (0 results found)',
  message: 'event 678ad3be-9d48-40e1-c217-db866f9972a9 does not exist (0 results found)' }
     *
     * Obviously, this should be made more machine parsable so that the caller can figure out if
     * there's a real error (no DB, etc.) or the resource just doesn't exist.
     *
     *
     *
     * @param id
     * @param callback {function} (err, deletedResource)
     */
    result.delete = function (id, callback) {
        crud.delete(result.find, resourceDescription, id, callback);
    };

    //result.collection = {
    //    /**
    //     *
    //     * @param id
    //     * @param parameters
    //     * @param callback
    //     */
    //    add: function(id, parameters, callback){
    //        collection.add(resourceDescription, id, parameters, callback);
    //    },
    //    /**
    //     *
    //     * @param id
    //     * @param parameters
    //     * @param callback
    //     */
    //    remove: function(id, parameters, callback){
    //        callection.remove(resourceDescription, id, parameters, callback);
    //    }
    //};


    // Give resourceDescription access to other resources
    //resourceDescription.resource = exports;
    if (_.isFunction(resourceDescription.setResources)) {
        resourceDescription.setResources(exports);
    }

    // Add r to the list of resources
    return result;
}


exports[eventDescription.name] = addResource(eventDescription);
exports[userDescription.name] = addResource(userDescription);
exports[commentDescription.name] = addResource(commentDescription);
exports[videoDescription.name] = addResource(videoDescription);
exports[layoutDescription.name] = addResource(layoutDescription);
exports[datasetDescription.name] = addResource(datasetDescription);


var createUpdateRetryCount = 25;
var retryDelay = 250;
var async = require('async');

exports['helpers'] = {
    /** Takes care of the details of handling a panel and a dataset.
     *
     * @param newDataset The dataset object to store in the DB
     * @param panelStream A stream representing the panel data
     * @param callback {err, updatedDataset}
     * @param bool never set to true. Leave undefined.
     */
    createDataset: function createDataset(newDataset, panelStream, callback, deepMigrate) {
        exports.dataset.create(newDataset, function (err, createdDataset) {
            if (err) {
                console.log(err);
            }
            exports.panel.createPanel(createdDataset.id, panelStream, function (err) {
                if (err) {
                    console.log(err);
                    callback(err);
                } else {
                    setTimeout(function () {
                        panel.panel.readPanelJSON(createdDataset.id, {
                            properties: {},
                            statistics: {}
                        }, function (err, result) {
                            if (err) {
                                console.log(err);
                                callback(err);
                            } else {
                                // There's a tendency to fail on the update if we're doing alot of updates
                                // at the same time, and right after a create. Therefore, we want to retry
                                // a few times. In my migration scripts most only needed 1 retry, and a few
                                // needed up to 3 retries. None failed permanently. -SRLM
                                async.retry(createUpdateRetryCount, function (retryCallback) {
                                    var updateTemp = {
                                        startTime: result.startTime,
                                        endTime: result.endTime,
                                        summaryStatistics: result.summaryStatistics,
                                        boundingBox: result.boundingBox,
                                        boundingCircle: result.boundingCircle,
                                        gpsLock: result.gpsLock,
                                        source: {
                                            scad: result.source
                                        }
                                    };
                                    //console.dir(updateTemp);
                                    exports.dataset.update(createdDataset.id, updateTemp,
                                        function (err, updatedDataset) {
                                            if (err) {
                                                console.log('Error on update: ' + err);
                                                setTimeout(function () {
                                                    retryCallback(err);
                                                }, retryDelay);
                                            } else {
                                                retryCallback(null, updatedDataset);
                                            }
                                        });
                                }, callback);
                            }
                        });
                    }, 500);
                }
            });
        }, deepMigrate);
    }
};



