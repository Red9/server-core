var moment = require('moment');
var _ = require('underscore')._;
var markdown = require('markdown').markdown;

module.exports = {
    name: 'comment',
    tableName: 'comment',

    mapping: [
        {
            cassandraKey: 'id',
            cassandraType: 'uuid',
            jsKey: 'id',
            jsType: 'string'
        },
        {
            cassandraKey: 'start_time',
            cassandraType: 'timestamp',
            jsKey: 'startTime',
            jsType: 'timestamp'
        },
        {
            cassandraKey: 'end_time',
            cassandraType: 'timestamp',
            jsKey: 'endTime',
            jsType: 'timestamp'
        },
        {
            cassandraKey: 'resource_type',
            cassandraType: 'varchar',
            jsKey: 'resourceType',
            jsType: 'string'
        },
        {
            cassandraKey: 'resource',
            cassandraType: 'uuid',
            jsKey: 'resouce',
            jsType: 'string'
        },
        {
            cassandraKey: 'author',
            cassandraType: 'uuid',
            jsKey: 'author',
            jsType: 'string',
        },
        {
            cassandraKey: 'body',
            cassandraType: 'varchar',
            jsKey: 'body',
            jsType: 'string'
        },
        {
            cassandraKey: 'create_time',
            cassandraType: 'timestamp',
            jsKey: 'createTime',
            jsType: 'timestamp'

        },
    ],

    checkResource: function (comment, callback) {
        /* TODO(CHECK):
         startTime <= endTime
         author invalid
         body is empty
         resourceType is invalid
         resource does not exist
         if startTime and endTime are defined then must be valid for dataset
         */
        callback(null);
    },
    populateDefaults: function (newComment) {
        if (typeof newComment.startTime === 'undefined') {
            newComment.startTime = 0;
        }
        if (typeof newComment.endTime === 'undefined') {
            newComment.endTime = 0;
        }
    },
    populateOnCreate: function (newComment) {
        newComment.createTime = moment().valueOf();
    },
    populateDynamic: function (comment) {
        comment.bodyHtml = markdown.toHTML(comment.body);
        return comment;
    },
    expand: function (parameters, comment, callback) {
        callback(null, comment);
//        var expandFunctions = {
//            author: function(resource, expandCallback) {
//                userResource.get({id: resource.author}, function(userList) {
//                    if (userList.length === 1) {
//                        resource.author = userList[0];
//                    }
//                    expandCallback();
//                });
//            }
//        };
    }
};
