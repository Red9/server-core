#!/bin/bash

command="./build/rncprocessor"
#TMPDIR=`mktemp`

testdir="test-data"
testfile_a="$testdir/data_a.RNC"
testfile_b="$testdir/data_b.RNC"
testfile_c="$testdir/data_c.RNC"
testfile_d="$testdir/data_d.RNC"
testfile_e="$testdir/data_e.RNC"
testfile_f="$testdir/data_f.RNC"
testfile_g="$testdir/data_g.RNC"
testfile_h="$testdir/data_h.RNC"

csvHeaderRow="row,time,acceleration:x,acceleration:y,acceleration:z,gps:altitude,gps:hdop,gps:heading,gps:latitude,gps:longitude,gps:satellites,gps:speed,magneticfield:x,magneticfield:y,magneticfield:z,pressure:pressure,pressure:temperature,rotationrate:x,rotationrate:y,rotationrate:z"

@test "first test" {
    run $command --help
    [ "$status" -eq 1 ]
}

@test "Requires an input filename" {
    run $command
    [ "$status" -eq 1 ]
}

@test "Requires a cross section period" {
    run $command --inputFile $testfile_a
    [ "$status" -eq 1 ]
}

@test "Requires an output type" {
    run $command --inputFile $testfile_a --csPeriod 10
    [ "$status" -eq 1 ]
}


@test "basic startTime and endTime" {
    run $command --inputFile $testfile_f --csPeriod 1000 --csvOutput --startTime 1400729108000 --endTime 1400729125000
    [ "$status" -eq 0 ]
    echo ${lines[1]}
    echo ${lines[18]}
    [ "${lines[0]}" = "$csvHeaderRow" ]
    [ "${lines[1]}" = "0,1400729108000,-9.25434,0.602896,3.26771,142.8,2.09,53.16,33.0536,-117.276,4,0.198,3.63055e-05,-6.46909e-06,-3.01756e-05,100656,20.6774,-0.00779464,-0.00193033,0.0099571" ]
    [ "${lines[18]}" = "17,1400729125000,-9.23003,0.608384,3.28966,143.9,2.09,256.1,33.0536,-117.276,4,0.506,3.64218e-05,-6.36727e-06,-2.9996e-05,100653,21.3005,-0.000989602,-0.000879646,0.00638965" ]
}

@test "startTime and endTime parameter checking" {
    run $command --inputFile $testfile_f --csPeriod 1000 --csvOutput --startTime 1400729108000
    [ "$status" -eq 1 ]

    run $command --inputFile $testfile_f --csPeriod 1000 --csvOutput --endTime 1400729125000
    [ "$status" -eq 1 ]

    run $command --inputFile $testfile_f --csPeriod 1000 --csvOutput --startTime 999999999 --endTime 123456789
    [ "$status" -eq 1 ]
}


################################################################################
# --rows
################################################################################
@test "basic rows" {
    run $command --inputFile $testfile_f --csvOutput --startTime 1400729108000 --endTime 1400729125000 --rows 10
    [ "$status" -eq 0 ]
    echo ${lines[1]}
    echo ${lines[10]}
    [ "${lines[0]}" = "$csvHeaderRow" ]
    [ "${lines[1]}" = "0,1400729108600,-9.2429,0.599068,3.27205,142.8,2.09,53.16,33.0536,-117.276,4,0.219412,3.6368e-05,-6.4632e-06,-3.0192e-05,100656,20.6873,-0.00145036,-0.00109313,0.00644445" ]
    [ "${lines[10]}" = "9,1400729123900,-9.24843,0.591228,3.2845,143.9,2.09,256.451,33.0536,-117.276,4,0.605882,3.61142e-05,-6.33615e-06,-2.98695e-05,100653,21.2511,-0.000445572,-0.00164574,-0.000100613" ]
    [ "${#lines[@]}" -eq 11 ]
}

@test "rows on big file" {
    run $command --inputFile $testfile_e --csvOutput --startTime 1414368000113 --endTime 1414371199859 --rows 1000
    [ "$status" -eq 0 ]
    echo ${lines[1]}
    echo ${lines[1000]}
    [ "${lines[0]}" = "$csvHeaderRow" ]
    [ "${lines[1]}" = "0,1414368001000,2.0326,-3.0944,8.01353,28.7111,1.22,196.094,33.8996,-118.421,6,6.37444,-6.11542e-05,1.74783e-05,-2.26575e-05,98362,17.2357,-1.13419,-0.32513,0.69469" ]
    [ "${lines[1000]}" = "999,1414371197546,-1.52929,-2.86748,9.09832,19.0156,1.03,34.4581,33.8996,-118.421,9,1.45531,-1.49557e-05,-7.36591e-06,-4.36136e-05,103004,17.618,-0.053863,0.0443412,-0.0686574" ]
    [ "${#lines[@]}" -eq 1001 ]
}


################################################################################
# CSV Tests
################################################################################

@test "Basic CSV works correctly" {
    run $command --inputFile $testfile_a --csPeriod 10 --csvOutput
    [ "$status" -eq 0 ]
    echo ${lines[1]}
    echo ${lines[2274]}
    [ "${lines[0]}" = "$csvHeaderRow" ]
    [ "${lines[1]}" = "0,1401326588000,0.132453,0.179003,10.1015,nan,nan,nan,nan,nan,nan,nan,-3.47273e-06,1.51818e-06,-4.2194e-05,95962.9,20.6337,-0.015449,0.00669981,0.08225" ]
    [ "${lines[2274]}" = "2273,1401326610730,0.0795241,0.0795241,10.2312,nan,nan,nan,nan,nan,nan,nan,-5.46216e-06,1e-06,-4.74047e-05,102338,16.73,-0.0211687,0.0137908,-0.0304957" ]
}

@test "Basic CSV works correctly, with GPS" {
    run $command --inputFile $testfile_f --csPeriod 1000 --csvOutput
    [ "$status" -eq 0 ]
    echo ${lines[1]}
    echo ${lines[58]}
    [ "${lines[0]}" = "$csvHeaderRow" ]
    [ "${lines[1]}" = "0,1400729078000,-7.7797,0.951231,5.81434,113.812,1.66,85.2575,33.0535,-117.277,5,0.89125,-4.17992e-05,1.9947e-05,-5.23343e-05,98268.2,18.7374,-0.0406662,0.00935765,0.0321141" ]
    [ "${lines[58]}" = "57,1400729135000,-9.58205,0.612304,0.902384,143.97,2.09,328.356,33.0536,-117.276,4,1.037,5.24582e-05,-9.17091e-06,-2.91715e-05,100652,21.6252,0.00193033,-0.00497244,-0.00205251" ]
}

################################################################################
# JSON Tests
################################################################################

@test "jsonProperties" {
    run $command --inputFile $testfile_a --csPeriod 1000 --jsonProperties
    [ "$status" -eq 0 ]
    echo $output
    [ "$output" = '{"startTime":1401326588000,"endTime":1401326610000}' ]
}

@test "jsonPanel no gps" {
    run $command --inputFile $testfile_a --csPeriod 10000 --jsonPanel
    [ "$status" -eq 0 ]
    echo $output
    correct='{"panel":{"time":[1401326588000,1401326598000,1401326608000],"acceleration:x":[0.13245312657090836,0.2206981158250506,0.2190496025979519],"acceleration:y":[0.17900312712299638,0.12734717132167193,0.13265280157327653],"acceleration:z":[10.101503244804917,10.363143519134415,10.298859322145582],"pressure:pressure":[95962.9375,102355.99792960663,102355.24693877551],"pressure:temperature":[20.633749538799749,22.103187911752344,22.34763215355271],"gps:altitude":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"gps:hdop":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"gps:heading":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"gps:latitude":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"gps:longitude":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"gps:satellites":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"gps:speed":[2.696539702293474e308,2.696539702293474e308,2.696539702293474e308],"rotationrate:x":[-0.0154489791020751,-0.02692624822570175,-0.019944750252761879],"rotationrate:y":[0.006699812365695834,0.009686136272777329,0.01234192141215317],"rotationrate:z":[0.08225004945416004,-0.036438204519590979,-0.018117041439400056],"magneticfield:x":[-0.000003472727510711593,-0.000004932646639099218,-0.000005224727630775305],"magneticfield:y":[0.0000015181819222220838,0.0000010559441283073914,9.480000649659815e-7],"magneticfield:z":[-0.00004219395335525178,-0.000046518715318148286,-0.00004667273691188711]}}'
    echo "process.exit(require('underscore')._.isEqual($output, $correct)? 0 : 1);" | node
    [ "$?" -eq 0 ]
}

@test "jsonPanel with gps" {
    run $command --inputFile $testfile_f --csPeriod 10000 --jsonPanel
    [ "$status" -eq 0 ]
    echo $output
    correct='{"panel":{"time":[1400729078000,1400729088000,1400729098000,1400729108000,1400729118000,1400729128000],"acceleration:x":[-7.779704871679903,-8.388251299485564,-9.305766510367393,-9.257393709793688,-9.24626090966165,-9.247593709677459],"acceleration:y":[0.9512305259875789,0.780080009251833,0.32692800387740136,0.6016416071355343,0.5945072070509195,0.6009360071271658],"acceleration:z":[5.8143364660174809,4.583812854364514,1.7723888210207224,3.222240038216114,3.280648038908839,3.288252838999033],"pressure:pressure":[98268.19047619048,100662.80410022779,100659.09403669725,100657.44827586207,100655.24827586208,100653.54942528736],"pressure:temperature":[18.73738053356785,19.326377700140239,20.03456377237608,20.49970069122126,20.885378843520223,21.248022513575426],"gps:altitude":[113.8125,135.36000000000005,143.15999999999989,142.8539999999997,143.0580000000001,143.91299999999988],"gps:hdop":[1.66,1.6599999999999975,1.6642999999999973,2.077100000000003,2.090000000000003,2.090000000000003],"gps:heading":[85.2575,62.391799999999978,53.159999999999929,53.159999999999929,165.47889999999996,258.00299999999955],"gps:latitude":[33.053513333333338,33.0535792333333,33.053574949999987,33.053569416666679,33.053563116666669,33.053554299999998],"gps:longitude":[-117.27663625,-117.27642801666673,-117.27637438333332,-117.27637043333356,-117.27639603333339,-117.27645081666663],"gps:satellites":[5.0,5.0,4.99,4.03,4.0,4.0],"gps:speed":[0.89125,0.6111,0.4885999999999992,0.2574000000000002,0.5888000000000002,0.5811000000000002],"rotationrate:x":[-0.04066617203144623,-0.02991407105291728,0.014671761456993409,-0.003909537568688393,-0.0007379252160899341,-0.0013988814112963155],"rotationrate:y":[0.009357650018460885,0.04242825646419078,0.021591642953571866,-0.026357613595901057,-0.005183802469982766,-0.0023860396473901347],"rotationrate:z":[0.03211405859994037,0.011586891969200224,-0.014096326396102087,0.0034110715286806228,0.0018277088133618236,0.0013634512270800769],"magneticfield:x":[-0.000041799245288724286,-0.000021874183317208917,0.000019254183137661583,0.00003663491160148169,0.00003638691158448637,0.00003637927522032669],"magneticfield:y":[0.000019946971063925883,0.00001565200107262399,0.000006684000458051287,-0.000006508727718767204,-0.000006424727713010725,-0.0000064021822569202418],"magneticfield:z":[-0.00005233427769546495,-0.00004864702617311423,-0.0000337980199040544,-0.000030046992756922462,-0.000030135972508617214,-0.000030078421384814648]}}'
    echo "process.exit(require('underscore')._.isEqual($output, $correct)? 0 : 1);" | node
    [ "$?" -eq 0 ]

}


################################################################################

@test "GPS something" {
    run $command --inputFile $testfile_h --csPeriod 10000 --csvOutput
    echo $output
    echo "$command --inputFile $testfile_h --csPeriod 10000 --csvOutput"
    [ "$status" -eq 1 ]
}



