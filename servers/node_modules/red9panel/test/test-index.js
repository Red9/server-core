var path = require('path');
var fs = require('fs');
var _ = require('underscore')._;

var sutPath = '../lib/index.js';

var config = {
    testData: [
        path.join(process.cwd(), 'testdata', 'testdata0.RNC')
    ],
    invalidDataPath: path.join(process.cwd(), 'invalidtestdata_temp'),
    dataPath: path.join(process.cwd(), 'testdata_temp')
};


var generateUUID = function () {
    function _p8() {
        return (Math.random().toString(16) + "000000000").substr(2, 8);
    }

    var setB = _p8();
    var setC = _p8();

    var t = ['8', '9', 'a', 'b'];
    var single = t[Math.floor(Math.random() * t.length)];

    return _p8() + '-' + setB.substr(0, 4) + '-4' + setB.substr(4, 3) + '-'
        + single + setC.substr(0, 3) + '-' + setC.substr(4, 4) + _p8();
};


exports['test initialization functionality'] = {

    'bad config throws errors': function (test) {
        test.throws(function () {
            require(sutPath).panelReader({
                dataPath: config.invalidDataPath
            });
        });

        test.done();
    }
};

exports['test file save functionality'] = {
    'can save file': function (test) {
        this.sut = require(sutPath).panelReader({
            dataPath: config.dataPath
        }).createPanel;

        var stream = fs.createReadStream(config.testData[0]);
        var id = generateUUID();

        test.expect(2);

        this.sut(id, stream, function (err) {
            test.ok(!err);

            var stats = fs.statSync(path.join(config.dataPath, id + '.RNC'));
            test.equal(stats.isFile(), true);

            // We could in theory test that the full file is transfered, but I
            // don't really want to write that up and maintain it since we'll
            // be able to tell pretty quick that something is bad.
            test.done();
        });
    },
};

exports['read csv'] = {
    setUp: function (callback) {
        var temp = require(sutPath).panelReader({
            dataPath: config.dataPath
        });

        var stream = fs.createReadStream(config.testData[0]);
        var id = generateUUID();

        this.sut = temp.readPanelCSV;
        this.id = id;
        temp.createPanel(id, stream, function (err) {
            if (err) {
                throw err;
            }

            callback();
        });
    },
    'basic': function (test) {
        test.expect(1);
        this.sut(this.id, function (err, stream) {
            stream.on('data', function (data) {
                //console.log(data);
            });

            stream.on('end', function (err) {
                test.ok(!err);
                test.done();
            });
        });
    },
    'checks to make sure panel exists before reading': function (test) {
        test.expect(1);
        this.sut('random' + this.id, function (err, stream) {
            test.ok(err);
            test.done();
        });
    }
};

exports['read json'] = {
    setUp: function (callback) {
        var temp = require(sutPath).panelReader({
            dataPath: config.dataPath
        });

        var stream = fs.createReadStream(config.testData[0]);
        var id = generateUUID();

        this.sut = temp.readPanelJSON;
        this.id = id;
        temp.createPanel(id, stream, function (err) {
            if (err) {
                throw err;
            }

            callback();
        });
    },
    'checks to make sure panel exists before reading': function (test) {
        test.expect(1);
        this.sut('random' + this.id, {}, function (err, data) {
            test.ok(err);
            test.done();
        });
    },
    'panel properties': function (test) {
        test.expect(4);

        this.sut(this.id, {
            csPeriod: 10000,
            properties: {}
        }, function (err, data) {
            test.ok(!err);
            test.ok(_.has(data, 'startTime'));
            test.ok(_.has(data, 'endTime'));
            test.equals(_.keys(data).length, 2);

            test.done();
        });
    },
    'panel data': function (test) {
        test.expect(6);

        this.sut(this.id, {
            csPeriod: 10000,
            panel: {}
        }, function (err, data) {
            test.ok(!err);
            test.ok(_.has(data, 'panel'));
            test.ok(_.isObject(data.panel));
            test.ok(_.has(data.panel, 'time'));
            test.ok(_.keys(data.panel).length > 1, 'we should have at least the time key plus one column of data');
            test.equals(_.keys(data).length, 1);

            test.done();
        });
    }
};

exports['delete panel'] = {
    setUp: function (callback) {
        var temp = require(sutPath).panelReader({
            dataPath: config.dataPath
        });

        var stream = fs.createReadStream(config.testData[0]);
        var id = generateUUID();

        this.sut = temp.deletePanel;
        this.id = id;
        temp.createPanel(id, stream, function (err) {
            if (err) {
                throw err;
            }

            callback();
        });
    },
    'basic': function (test) {
        test.expect(1);

        this.sut(this.id, function (err) {
            test.ok(!err);
            test.done();
        });
    }
};

















