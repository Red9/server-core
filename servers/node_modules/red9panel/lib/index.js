var spawn = require('child_process').spawn;
var execFile = require('child_process').execFile;
var path = require('path');
var fs = require('fs');
var VError = require('verror');
var _ = require('underscore')._;

var kRNCProcessorPath = path.join(__dirname, '../rnctools/build/rncprocessor');
var kCorrectRNCPath = path.join(__dirname, '../rnctools/build/correctrnc');

/** Determine if a file is executable
 *
 * Adapted from http://stackoverflow.com/a/11781404/2557842
 *
 * @param stats stats object from a call to fs.stat(path)
 * @returns {boolean} true if executable
 */
function canExecute(stats) {
    var mask = 1;
    return !!(mask & parseInt((stats.mode & parseInt("777", 8)).toString(8)[0]));
}

/**
 *
 * @param config required keys:
 *
 * dataPath: the folder to store panels in.
 * command: the command to run to process the panels (optional)
 *
 *
 * @returns {{readPanelCSV: readPanelCSV, readPanelJSON: readPanelJSON, putFile: putFile}}
 */
exports.panelReader = function (config) {
    var dataStat = fs.statSync(config.dataPath);
    if (!dataStat.isDirectory()) {
        throw new VError("Must provide a valid directory for dataPath");
    }

    var commandStat = fs.statSync(kRNCProcessorPath);

    if (!commandStat.isFile() || !canExecute(commandStat)) {
        throw new VError("Must provide a valid executable file for command");
    }


    function createFilename(id) {
        return path.join(config.dataPath, id) + '.RNC';
    }

    /** Looks and checks to see if there is a valid panel in the data store.
     *
     * @param id
     * @param callback {err, bool} true if panel exists, false otherwise
     */
    function checkForPanel(id, callback) {
        fs.stat(createFilename(id), function (err, stats) {
            if (err) {
                callback(err);
            } else {
                callback(null, stats.isFile());
            }

        });
    }

    /** A little helper function that makes it easier to always check for a panel before doing something.
     *
     * This function will call the error callback if the file doesn't exist or some other filesystem error.
     *
     * @param id
     * @param errorCallback Called if there is an error. This should go back to the client.
     * @param successCallback {} Called if there's no errors
     */
    function checkForPanelHelper(id, errorCallback, successCallback) {
        checkForPanel(id, function (err, exists) {
            if (err) {
                errorCallback(err);
            } else if (!exists) {
                errorCallback(new VError('Panel with id %s does not exist.', id));
            } else {
                successCallback();
            }
        });
    }


    /**
     *
     * @param inputFilename
     * @param outputFilename
     * @param callback
     */
    function correctFile(inputFilename, outputFilename, callback) {
        // Open up the RNC and look at the start time. If it's valid, then do nothing
        // If it's gibberish then replace it with the default time.
        // In the future we can go through and have it pull out the GPS time
        // and use that.
        var parameters = [
            '--inputFile',
            inputFilename,
            '--outputFile',
            outputFilename,
            '--default',
            0 // Use unix epoch as the fallback time.
        ];

        execFile(kCorrectRNCPath, parameters, {
            maxBuffer: 1024 * 1024,
            timeout: 120000 /* timeout in milliseconds */
        }, function (err, stdout, stderr) {
            callback(err);
        });
    }

    /** Add a new panel to the data store
     *
     * @warning this won't hesitate to overwrite an existing panel.
     *
     * @param id The id of the dataset that this panel belongs to.
     * @param inputStream The file, as a stream. This will be written directly to disk.
     * @param callback {err} Called once the file is written, or if an error occurs.
     */
    function createPanel(id, inputStream, callback) {
        var uploadFilename = createFilename(id + '.upload');
        var filename = createFilename(id);

        inputStream.pipe(fs.createWriteStream(uploadFilename));
        inputStream.on('end', function () {
            correctFile(uploadFilename, filename, callback);
        });
        inputStream.on('error', function (err) {
            callback(err);
        });
    }


    /**
     *
     * @param id
     * @param callback {err, stream}
     */
    function readPanelCSV(id, callback) {
        checkForPanelHelper(id, callback, function () {

            var filename = createFilename(id);
            var parameters = [
                '--inputFile',
                filename,
                '--csvOutput',
                '--csPeriod',
                10000
            ];

            var reader = spawn(kRNCProcessorPath, parameters);
            reader.stdout.setEncoding('utf8');
            reader.stderr.setEncoding('utf8');

            reader.on('exit', function (code, signal) {
                if (code !== 0) {
                    // Throwing probably isn't the best option here...
                    throw new VError('Exit code invalid: %d, stderr: %s', code, '' + reader.stderr.read());
                }
            });

            reader.on('error', function (err) {
                // Again, throwing probably isn't the best option here...
                throw new VError(err, 'Something went wrong with the streams.');
            });

            callback(null, reader.stdout);
        });
    }


    /** Get the JSON representation of the panel.
     *
     * @param id
     * @param options supported options are:
     *
     *  csPeriod: the number of milliseconds to set the cross section to
     *  rows: the approximate number of output rows
     *  startTime: output rows whose timestamp is equal to or greater than this time
     *  endTime: output rows whose timestamp is equal to or less than this time
     *  properties: an object. Specify if you want properties of the panel.
     *  panel: an object. Specify if you want panel output.
     *  statistics: an object. Specify if you want panel summary statistics.
     *
     * @param callback {err, result} result is a JSON object.
     */
    function readPanelJSON(id, options, callback) {
        // Check parameters
        if (_.has(options, 'csPeriod') && _.has(options, 'rows')) {
            callback(new VError('Must provide only one of csPeriod or rows.'));
            return;
        }

        // If we specify one of startTime or endTime, we have to specify both.
        // If we specify rows then we have to to specify startTime and endTime.
        // If they're not specified then we'll need to read it from the panel on the first time,
        //  then use that to "inject" it into another call. This is sub optimal (it would be
        //  faster if we used the dataset resource's startTime and endTime), but it's self contained
        //  and simple.
        if (_.has(options, 'startTime') !== _.has(options, 'endTime')
            || (_.has(options, 'rows') && (!_.has(options, 'startTime') || !_.has(options, 'endTime')))) {

            console.log('We need to read some timestamps');
            readPanelJSON(id, {csPeriod: 10000, properties: {}}, function (err, result) {
                console.log('Got the timestamps.');
                if (!_.has(options, 'startTime')) {
                    options.startTime = result.startTime;
                }
                if (!_.has(options, 'endTime')) {
                    options.endTime = result.endTime;
                }
                readPanelJSON(id, options, callback);
            });
            return; // Make sure that we don't continue processing on this level.
        }

        checkForPanelHelper(id, callback, function () {
            var filename = createFilename(id);
            var parameters = [
                '--inputFile',
                filename
            ];

            if (_.has(options, 'csPeriod')) {
                parameters.push('--csPeriod');
                parameters.push(options.csPeriod);
            }

            if (_.has(options, 'rows')) {
                parameters.push('--rows');
                parameters.push(options.rows);
            }

            if (_.has(options, 'startTime')) {
                parameters.push('--startTime');
                parameters.push(options.startTime);
            }

            if (_.has(options, 'endTime')) {
                parameters.push('--endTime');
                parameters.push(options.endTime);
            }

            if (_.has(options, 'properties')) {
                parameters.push('--jsonProperties');
            }

            if (_.has(options, 'statistics')){
                parameters.push('--jsonStatistics');
            }

            if (_.has(options, 'panel')) {
                parameters.push('--jsonPanel');
            }

            //console.log(kRNCProcessorPath + ' ' + parameters.join(' '));

            execFile(kRNCProcessorPath, parameters, {
                maxBuffer: 1024 * 1024,
                timeout: 120000 /* timeout in milliseconds */
            }, function (err, stdout, stderr) {
                if (err) {
                    callback(err);
                } else {
                    var output = {};
                    try {
                        output = JSON.parse(stdout);
                    } catch (e) {
                        console.log('readPanelJSON parsing error: ' + e);
                    }
                    callback(null, output);
                }
            });
        });
    }


    function deletePanel(id, callback) {
        checkForPanelHelper(id, callback, function () {
            // For some reason it appears that unlink doesn't call it's callback.
            // So, we'll just assume things went peachy.
            fs.unlink(createFilename(id, function (err) {
                if (err) {
                    throw new VError(err, 'The unexpected happened: fs.unlink gave an error!');
                }
            }));

            fs.unlink(createFilename(id + '.upload', function (err) {
                if (err) {
                    throw new VError(err, 'The unexpected happened: fs.unlink gave an error! On .upload');
                }
            }));

            callback(null);
        });
    }


    return {
        checkForPanel: checkForPanel,
        createPanel: createPanel,
        readPanelCSV: readPanelCSV,
        readPanelJSON: readPanelJSON,
        deletePanel: deletePanel
    };
};



